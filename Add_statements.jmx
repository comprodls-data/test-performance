<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Add statements" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add statements" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;actor&quot;: {&#xd;
    &quot;uuid&quot;: &quot;${userid}&quot;&#xd;
  },&#xd;
 &quot;product&quot;: {&#xd;
      &quot;code&quot;: &quot;${productcode}&quot;&#xd;
    },&#xd;
  &quot;entities&quot;: [{&#xd;
    &quot;verb&quot;: &quot;${verb}&quot;,&#xd;
    &quot;item-code&quot;: &quot;${task}&quot;,&#xd;
    &quot;timespent&quot;: 200000,&#xd;
    &quot;timestamp&quot;:${__time()},&#xd;
     &quot;result&quot;: {&#xd;
	    &quot;score&quot;: {&#xd;
	          &quot;min&quot;: 0,&#xd;
	          &quot;scaled&quot;: 0.8,&#xd;
	          &quot;max&quot;: 1,&#xd;
	          &quot;raw&quot;: 0&#xd;
	        		}&#xd;
  			}&#xd;
 		 },&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}},&#xd;
 		 {&quot;verb&quot;:&quot;answered&quot;,&quot;item-code&quot;:&quot;${task}&quot;,&quot;timestamp&quot;:${__time()},&quot;timespent&quot;:2000,&quot;result&quot;:{&quot;response&quot;:&quot;{\&quot;items\&quot;:[{\&quot;items\&quot;:[\&quot;dfdfd\&quot;]}],\&quot;status\&quot;:\&quot;corrected\&quot;,\&quot;checkAttempts\&quot;:1,\&quot;manualCheckAttempts\&quot;:1,\&quot;solutionHint\&quot;:false,\&quot;notes\&quot;:[],\&quot;tc_code\&quot;:2}&quot;,&quot;score&quot;:{&quot;scaled&quot;:0,&quot;raw&quot;:0,&quot;min&quot;:0,&quot;max&quot;:1}},&quot;meta&quot;:{&quot;contributesToCompletion&quot;:true}}],&#xd;
   &quot;classid&quot;: &quot;${classid}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host_url}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lb-xapi/${orgid}/statements/multi</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">test-perf-id</stringProp>
                <stringProp name="Header.value">${date}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.product.code</stringProp>
            <stringProp name="EXPECTED_VALUE">${productcode}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
